{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","detail","entries","search","view","viewReducer","state","action","type","value","processEntries","data","map","entry","idx","date","parse","Date","key","ShowDetail","ShowListItem","className","format","name","age","city","App","useReducer","dispatch","useEffect","Tabletop","init","simpleSheet","then","tabletop","exact","path","ShowList","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8ZAqBMA,EAAe,CACnBC,OAAQ,KACRC,QAAS,GACTC,OAAQ,GACRC,KAAM,WAGFC,EAAc,SAACC,EAAOC,GAC1B,OAAOA,EAAOC,MACZ,IAAK,UACH,OAAO,eAAKF,EAAZ,CAAmBJ,QAASK,EAAOL,UACrC,IAAK,SACH,OAAO,eAAKI,EAAZ,CAAmBH,OAAQI,EAAOE,QACpC,IAAK,OACH,OAAO,eAAKH,EAAZ,CAAmBF,KAAMG,EAAOE,QAClC,QACE,OAAOH,IAKb,SAASI,EAAeC,GAatB,OAZcC,cAAID,GAAM,SAACE,EAAMC,GAE7B,IAAIC,EAAQF,EAAK,MAAU,GAG3B,OAFAE,EAAOC,YAAMD,EAAK,QAAS,IAAIE,MAExB,aACLC,IAAKJ,GACFD,EAFL,CAGEE,YAgBN,SAASI,IACP,OAAO,sCAGT,SAASC,EAAaP,GACpB,OAAO,yBAAKQ,UAAU,kBAAkBH,IAAKL,EAAMK,KACjD,yBAAKG,UAAU,kBACb,yBAAKA,UAAU,mBAEjB,yBAAKA,UAAU,kBAAkBC,YAAOT,EAAME,KAAM,aACpD,yBAAKM,UAAU,qBACb,yBAAKA,UAAU,kBAAkBR,EAAMU,MACvC,yBAAKF,UAAU,iBAAf,OAAoCR,EAAMW,KAC1C,yBAAKH,UAAU,sBAAsBR,EAAMY,KAA3C,KAAmDZ,EAAMP,QACxD,IAkDQoB,MAzCf,WAAgB,IAAD,EASTC,qBAAWtB,EAAaL,GATf,0BAITE,GAJS,EAGTD,OAHS,EAITC,SAIF0B,GARW,EAKTzB,OALS,EAMTC,KANS,MAuBb,OAXAyB,qBAAU,WACRC,IAASC,KAAM,CACbb,IAAK,uGACLc,aAAa,IACbC,MAAK,SAAStB,EAAMuB,GACpBN,EAAS,CAAEpB,KAAM,UAAWN,QAASQ,EAAeC,UACjD,IAML,kBAAC,IAAD,KACA,6BACA,8CACA,gEACA,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,KAChB,yBAAKf,UAAU,YAlC3B,SAAkBnB,GAChB,OAAOU,cAAIV,EAASkB,GAkCPiB,CAASnC,KAGd,kBAAC,IAAD,CAAOkC,KAAK,OAAOE,SAAU,kBAACnB,EAAD,CAAYjB,QAASA,UChHxCqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b7c70fe.chunk.js","sourcesContent":["import React, { useReducer, useRef, useEffect, useLayoutEffect, useCallback, forwardRef } from \"react\"\nimport PropTypes from 'prop-types';\n\nimport Tabletop from \"tabletop\"\n\nimport { map, keys, find, filter, sortBy, groupBy, uniqBy } from \"lodash\"\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\nimport {\n  parse,\n  format\n} from \"date-fns\"\n\n\nconst initialState = {\n  detail: null,\n  entries: [],\n  search: \"\",\n  view: \"posters\"\n}\n\nconst viewReducer = (state, action) => {\n  switch(action.type) { \n    case \"ENTRIES\":\n      return { ...state, entries: action.entries }\n    case \"SEARCH\":\n      return { ...state, search: action.value }\n    case \"VIEW\":\n      return { ...state, view: action.value }\n    default:\n      return state;\n\n  }\n}\n\nfunction processEntries(data) {\n  let entries = map(data, (entry,idx) => { \n\n    let date = (entry[\"date\"]||\"\")\n    date = parse(date,'m/d/y', new Date())\n\n    return {\n      key: idx,\n      ...entry,\n      date\n    };\n      \n  })\n  return entries;\n}\n\n\nfunction runSearch(entries, search) {\n  let q = search.toLowerCase()\n  return filter(entries, (entry) => {\n    return entry.search.includes(q)\n  })\n}\n\n\nfunction ShowDetail() {\n  return <div>sdasf</div>;\n}\n\nfunction ShowListItem(entry) {\n  return <div className='namelist__entry' key={entry.key}>\n    <div className='namelist__line'>\n      <div className='namelist__dot'></div>\n    </div>\n    <div className='namelist__date'>{format(entry.date, 'm.d.yyyy')}</div>\n    <div className='namelist__details'>\n      <div className='namelist__name'>{entry.name}</div>\n      <div className='namelist__age'>Age {entry.age}</div>\n      <div className='namelist__location'>{entry.city}, {entry.state}</div>\n      {false && entry.image && <div className='namelist__image' style={{backgroundImage: `url(\"${entry.image}\")` }}></div>}\n    </div>\n  </div>\n}\n\nfunction ShowList(entries) {\n  return map(entries, ShowListItem)\n}\n\nfunction App() {\n  const [\n    {\n      detail,\n      entries,\n      search,\n      view\n    },\n    dispatch\n  ] = useReducer(viewReducer, initialState)\n\n\n  useEffect(() => { \n    Tabletop.init( {\n      key: 'https://docs.google.com/spreadsheets/d/1ZWIpWwkm5C0pERHiRkmHsYTmReG4F3KC38ofquCLJZY/edit?usp=sharing',\n      simpleSheet: true }\n    ).then(function(data, tabletop) { \n      dispatch({ type: \"ENTRIES\", entries: processEntries(data) })\n   }) }, []);\n\n\n\n\n  return (\n    <Router>\n    <div>\n    <h1>Say Their Name</h1>\n    <h2>text goes here...write text here</h2>  \n    <Switch>\n          <Route exact path=\"/\">\n            <div className='namelist'>\n              {ShowList(entries)}\n            </div>\n          </Route>\n          <Route path=\"/:id\" children={<ShowDetail entries={entries} />} />\n        </Switch>\n     </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}