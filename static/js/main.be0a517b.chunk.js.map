{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","detail","entries","search","view","viewReducer","state","action","type","value","processEntries","data","map","entry","idx","date","parse","Date","key","ShowListItem","className","onClick","article","startsWith","window","open","visitArticle","format","name","parseInt","age","city","hidden","visibilityChange","scrollReset","lastScroll","paused","addEventListener","scrollY","document","msHidden","webkitHidden","App","useReducer","dispatch","useEffect","fetch","then","response","json","scrollTimer","requestAnimationFrame","scroll","href","class","id","ShowList","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be0a517b.chunk.js","sourcesContent":["import React, { useReducer, useRef, useEffect, useLayoutEffect, useCallback, forwardRef } from \"react\"\nimport PropTypes from 'prop-types';\n\n\nimport { map, keys, find, filter, sortBy, groupBy, uniqBy } from \"lodash\"\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\nimport {\n  parse,\n  format\n} from \"date-fns\"\n\n\nconst initialState = {\n  detail: null,\n  entries: [],\n  search: \"\",\n  view: \"posters\"\n}\n\nconst viewReducer = (state, action) => {\n  switch(action.type) { \n    case \"ENTRIES\":\n      return { ...state, entries: action.entries }\n    case \"SEARCH\":\n      return { ...state, search: action.value }\n    case \"VIEW\":\n      return { ...state, view: action.value }\n    default:\n      return state;\n\n  }\n}\n\nfunction processEntries(data) {\n  let entries = map(data, (entry,idx) => { \n\n    let date = (entry[\"date\"]||\"\")\n    date = parse(date,'m/d/y', new Date())\n\n    return {\n      key: idx,\n      ...entry,\n      date\n    };\n      \n  })\n  return entries;\n}\n\n\nfunction runSearch(entries, search) {\n  let q = search.toLowerCase()\n  return filter(entries, (entry) => {\n    return entry.search.includes(q)\n  })\n}\n\nfunction visitArticle(entry) {\n  if(entry.article.startsWith(\"http://\") ||\n     entry.article.startsWith(\"htttps://\")) {\n    window.open(entry.article)\n  }\n}\n\nfunction ShowListItem(entry) {\n  return <div className='namelist__entry' key={entry.key} onClick={() => visitArticle(entry) }>\n    <div className='namelist__line'>\n      <div className='namelist__dot'></div>\n    </div>\n    <div className='namelist__date'>{format(entry.date, 'm.d.yyyy')}</div>\n    <div className='namelist__details'>\n      <div className='namelist__name'>{entry.name}</div>\n      {(parseInt(entry.age,10) > 0) && <div className='namelist__age'>Age {entry.age}</div>}\n      <div className='namelist__location'>{entry.city}, {entry.state}</div>\n      {false && entry.image && <div className='namelist__image' style={{backgroundImage: `url(\"${entry.image}\")` }}></div>}\n    </div>\n  </div>\n}\n\nfunction ShowList(entries) {\n  return map(entries, ShowListItem)\n}\n\nlet scrollReset = 0;\nlet lastScroll = 0;\nlet paused = false;\n\n\nfunction scrollTimer() {\n  window.requestAnimationFrame(() => {\n\n    if(scrollReset > 0) {\n      scrollReset -= 1;\n    } else if(!paused) {\n      lastScroll = window.scrollY + 2;\n      window.scroll(0,lastScroll);\n    }\n\n    scrollTimer();\n  });\n\n}\n\n\nfunction handleVisibilityChange() {\n  if (document[hidden]) {\n    paused = true;\n  } else {\n    scrollReset = 30;\n    paused = false;\n  }\n}\n\nwindow.addEventListener(\"scroll\",() => {\n  if(lastScroll != window.scrollY && window.scrollY > 0) {\n    scrollReset = 200;\n  }\n})\n\nvar hidden, visibilityChange; \nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support \n  hidden = \"hidden\";\n  visibilityChange = \"visibilitychange\";\n} else if (typeof document.msHidden !== \"undefined\") {\n  hidden = \"msHidden\";\n  visibilityChange = \"msvisibilitychange\";\n} else if (typeof document.webkitHidden !== \"undefined\") {\n  hidden = \"webkitHidden\";\n  visibilityChange = \"webkitvisibilitychange\";\n}\n\ndocument.addEventListener(visibilityChange, handleVisibilityChange, false);\n\n\n\nfunction App() {\n  const [\n    {\n      detail,\n      entries,\n      search,\n      view\n    },\n    dispatch\n  ] = useReducer(viewReducer, initialState)\n\n\n  useEffect(() => { \n    fetch(\"names.json\")\n     .then(response => response.json())\n     .then(data => {\n      dispatch({ type: \"ENTRIES\", entries: processEntries(data) })\n      scrollTimer();\n   }) }, []);\n\n\n\n\n  return (\n    <div>\n    <header>\n      <h1>Say Their Names</h1>\n      <h2>These are the names of known black individuals killed by the police between 2013 and 2020, concluding with George Floyd. It is almost impossible to scroll through the sheer volume of names listed here. Of equal importance are the names not listed: those of the friends, family, and loved ones left behind. <br/><br/>\n      This violence extends well beyond the past seven years; the data does not.\n      </h2> \n      <h3>\n        Sources: <a href=\"https://mappingpoliceviolence.org/\">Mapping Police Violence</a>, <a href=\"https://www.washingtonpost.com/graphics/investigations/police-shootings-database/\">Washington Post</a>, <a href=\"https://killedbypolice.net/\">Killed By Police</a>, and “<a href=\"https://www.npr.org/2020/05/29/865261916/a-decade-of-watching-black-people-die\">A Decade of Watching Black People Die</a>,” an episode of NPR’s Code Switch. Names are typeset in <a href=\"https://www.vocaltype.co/history-of/martin\">MARTIN</a> inspired by signage from the 1968 Memphis Sanitation Strike and designed by Tr&eacute;s Seals.<br/><br/>\n        <a href=\"mailto:saytheirnames.us@gmail.com\">Talk with us.</a>\n      </h3>\n      <div class=\"date-exp\">data begins in<br/>2013</div>\n    </header>  \n\n    <div className=\"button\" id=\"side-button\"><a href=\"https://docs.google.com/document/d/1zh6reFJWkZRGBL5iIezTfA2tkKBB3X9JcMh2QYT8tWk/mobilebasic\">What You Can Do</a></div>    \n      <div className='namelist'>\n        {ShowList(entries)}\n      </div>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}